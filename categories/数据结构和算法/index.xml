<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构和算法 on 淡淡忧愁</title>
    <link>https://timx.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构和算法 on 淡淡忧愁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Oct 2018 13:51:03 +0800</lastBuildDate>
    
	<atom:link href="https://timx.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据结构和算法学习理解C语言实现(一)</title>
      <link>https://timx.cn/post/c_algorithm_1/</link>
      <pubDate>Thu, 18 Oct 2018 13:51:03 +0800</pubDate>
      
      <guid>https://timx.cn/post/c_algorithm_1/</guid>
      <description>常用的算法思想 枚举算法思想 将问题的所有可能的答案一一列举，然后根据条件判断此答案是否合适，保留合适的，丢弃不合适。在C语言中，枚举算法一般使用while循环实现。使用枚举算法解题的基本思路如下。
 确定枚举对象、枚举范围和判定条件。 逐一列举可能的解，验证每个解是否是问题的解。  枚举算法一般按照如下3个步骤进行。
 题解的可能范围，不能遗漏任何一个真正解，也要避免有重复。 判断是否是真正解的方法。 使可能解的范围降至最小，以便提高解决问题的效率。  问题:公鸡每只5元，母鸡每只3元，小鸡3只一元。用100元钱买100只鸡，问公鸡、母鸡、小鸡各多少？
#include &amp;lt;stdio.h&amp;gt; int main() { int x,y,z;//x:公鸡，y:母鸡，z:小鸡 for(x=0;x&amp;lt;=20;x++) { for(y=0;y&amp;lt;=33;y++) { z=100-x-y; if(z%3==0 &amp;amp;&amp;amp; x*5+y*3+z/3==100) printf(&amp;quot;公鸡：%d,母鸡：%d,小鸡：%d\n&amp;quot;, x,y,z); } } getchar(); return 0; }  输出 +++++++++++++++++++++++ 公鸡：0,母鸡：25,小鸡：75 公鸡：4,母鸡：18,小鸡：78 公鸡：8,母鸡：11,小鸡：81 公鸡：12,母鸡：4,小鸡：84 +++++++++++++++++++++++  递推算法思想 递推算法可以不断利用已有的信息推导出新的东西，在日常应用有两种递推算法。
 顺推法：从已知条件出发，逐步推算出要解决问题的方法。例如斐波那契数列就可以通过顺推法不断递推算出新的数据。 逆推法：从已知的结果出发，用迭代表达式逐步推算出问题开始的条件，即顺推法的逆过程。  问题：斐波那契数列以兔子繁殖为例子而引入，所以又称为“兔子数列”。兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生一对小兔子。如果所以兔子都不死，那么一年之后可以繁殖多少对兔子
算法分析：
 第一个月小兔子没有繁殖能力，所以还是一对。 2个月后，一对小兔子生下一对新的小兔子，所以共有两对兔子。 3个月以后，老兔子又生下一对，因为小兔子还没有繁殖能力，所以一共是3对。  月数与兔子对数关系表
   - - - - - - - - - -     月数： 1 2 3 4 5 6 7 8 &amp;hellip;   对数： 1 1 2 3 5 8 13 21     对数：1,1,2,3,5,8··· ···构成了一个数列，这个数列有个十分明显的特点：前面相邻两项之和，构成了后一项。</description>
    </item>
    
  </channel>
</rss>