<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on 淡淡忧愁</title>
    <link>https://timx.cn/categories/http/</link>
    <description>Recent content in Http on 淡淡忧愁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jul 2018 14:08:30 +0800</lastBuildDate>
    
	<atom:link href="https://timx.cn/categories/http/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP学习理解(五)</title>
      <link>https://timx.cn/post/http_5/</link>
      <pubDate>Tue, 31 Jul 2018 14:08:30 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_5/</guid>
      <description> HTTP首部 HTTP报文首部 HTTP请求报文： 在请求中， HTTP报文由方法， URL， HTTP版本和HTTP首部字段等构成；
HTTP响应报文： 在响应中， HTTP报文由HTTP版本， 状态码， HTTP首部三个部分组成。
HTTP首部字段 在客户端和服务器之间以HTTP协议进行通信的过程中， 无论是请求还是响应都会使用到首部 字段， 它能起到传递额外重要信息的作用。
四种HTTP首部字段类型： &amp;nbsp;通用首部字段（General Header Fields）:请求报文和响应报文两方都会使用的首部；
&amp;nbsp;请求首部字段（Request Header Fields）:从客户端向服务器发送请求报文时使用的首部。补充了请求的附加内容，客户端的信息，响应内容相关的优先级等信息。
&amp;nbsp;响应首部字段（Response Header Fields）:从服务器向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。
&amp;nbsp;实体首部字段（Entity Header Fields）:针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。
HTTP首部字段一览表 通用首部字段    首部字段名 说明     Cache-Control 控制缓存的行为   Connection 逐跳首部， 连接的管理   Date 创建报文的日期时间   Pragna 报文指令   Trailer 报文末端的首部一览   Transfer-Encoding 指定报文主体的传输编码方式   Upgrade 升级为其他协议   Via 代理服务器的相关信息   Warning 错误通知    请求首部字段    首部字段名 说明     Accept 用户代理可处理的媒体类型   Accept—Charset 优先的字符集   Accept-Encoding 优先的内容编码   Accept-Language 优先的语言（自然语言）   Authorization Web认证信息   Expect 期待服务器的指定行为   From 用户的电子邮箱地址   Host 请求资源所在服务器   if-Match 比较实体标记（ETag）   if-Modified-Since 比较资源的更新时间   if-None-Match 比较实体标记（与if-Match相反）   if-Range 资源为更新时发送实体Byte的范围请求   if-Unmodified-Since 比较资源的更新时间（与if-Modified-Since相反）   Max-Forwards 最大传输逐跳数   Proxy-Authorization 代理服务器要求客户端的认证信息   Range 实体字节范围请求   Referer 对请求中的URL的原始获取方法   TE 传输编码的优先级   User-Agent HTTP客户端程序的信息    响应首部字段    首部字段名 说明     Accept-Ranges 是否接受字节范围请求   Age 推算资源创建经过时间   ETag 资源的匹配信息   Location 令客户端重定向至指定的URL   Proxy-Authenticate 代理服务器对客户端的认证信息   Rety-After 对再次发起请求的时机要求   Server HTTP服务器的安装信息   Vary 代理服务器缓存的管理信息   WWW-Authenticate 服务器对客户端的认证信息    实体首部字段    首部字段名 说明     Allow 资源科支持的HTTP方法   Content-Encoding 实体主体适用的编码方式   Content-Language 实体主体的自然语言   Content-Length 实体主体的大小（单位：字节）   Content-Location 替代对资源的URL   Content-MD5 实体主体的报文摘要   Content-Range 实体主体的位置范围   Content-Type 实体主体的媒体类型   Expires 实体主体过期的日期时间   Last-Modified 资源的最后修改日期时间    为Cookie服务的首部字段    首部字段名 说明 首部类型     Set-Cookie 开始状态管理所有的Cookie信息 响应首部字段   Cookie 服务器接收到的Cookie信息 请求首部字段    Set—Cookie字段的属性    属性 说明     NAME=VALUE 赋予Cookie的名称和其值   expires=DATE Cookie的有效期（若不mingque指定则默认为浏览器关闭前为止）   path=PATH 将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的目录）   domain=域名 作为Cookie适用对象的域名（若不指定则默认为创建Cookie的服务器的域名）   Scure 仅在HTTPS安全通信时才会发送Cookie   HttpOnly 加以限制， 使Cookie不能被JavaScript脚本访问    </description>
    </item>
    
    <item>
      <title>HTTP学习理解(四)</title>
      <link>https://timx.cn/post/http_4/</link>
      <pubDate>Sat, 28 Jul 2018 13:18:11 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_4/</guid>
      <description>与HTTP协作的Web服务器 用单台虚拟主机实现多个域名 HTTP/1.1规范允许一台HTTP服务器搭建多个Web站点。 即使物理层面只有一台服务器， 但只 要使用虚拟主机的功能， 则可以假想已具有多台服务器。
通信数据转发程序 代理 接收客户端的请求并转发给服务器， 同时也接收服务器的响应返回给客户端。
使用代理服务器的理由： 利用缓存技术减少带宽的流量， 组织内部针对网站的控制， 以获取访问日志为主要目的等。
代理按照使用方法的分类： 缓存代理：代理转发响应式， 缓存代理会先将资源的副本保存在代理服务器上。 透明代理：转发请求或响应时， 不对报文做任何加工的代理类型称为透明代理， 反之则 称为非透明代理。
网关 接收客户端发过来的请求并对其进行处理。 网关的工作机制和代理十分相似。 而且网关能使通信线路上的服务器提供非HTTP协议服务。 利用网关还能提高通信的安全性， 因为在客户端与网关之间的通信线路上加密以确保连接的 安全。
隧道 在相隔甚远的客户端和服务器两者之间进行中转， 并保持双方通信连接的应用程序。 隧道可按照要求建立起一条与其他服务器的通信线路， 届时使用SSL等加密手段进行通信。 隧 道的目的是确保客户端能与服务器进行安全的通信。 隧道本身并不会去解析HTTP请求， 隧道 会在通信双方断开连接时结束。</description>
    </item>
    
    <item>
      <title>HTTP学习理解(三)</title>
      <link>https://timx.cn/post/http_3/</link>
      <pubDate>Fri, 27 Jul 2018 13:43:49 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_3/</guid>
      <description>返回结果的HTTP状态码     类别 原因短语     1xx Informational（信息性状态码） 接收的请求正在处理   2xx Success（成功状态码） 请求正常处理完毕   3xx Redirection（重定向状态码） 需要进行附加操作以完成请求   4xx Client Error（客户端错误状态码） 服务器无法处理请求   5xx Server Error（服务器错误状态码） 服务器处理请求出错    
   状态码 英文名称 中文描述     100&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Continue 继续。客户端应继续其请求   101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议      200 OK 请求成功。一般用于GET与POST请求   201 Created 已创建。成功请求并创建了新的资源   202 Accepted 已接受。已经接受请求，但未处理完成   203 Non-Authoritative Information 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本   204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档   205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域   206 Partial Content 部分内容。服务器成功处理了部分GET请求      300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择   301 Moved Permanently 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替   302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI   303 See Other 查看其它地址。与301类似。使用GET和POST请求查看   304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源   305 Use Proxy 使用代理。所请求的资源必须通过代理访问   306 Unused 已经被废弃的HTTP状态码   307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向      400 Bad Request 客户端请求的语法错误，服务器无法理解   401 Unauthorized 请求要求用户的身份认证   402 Payment Required 保留，将来使用   403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求   404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&#34;</description>
    </item>
    
    <item>
      <title>HTTP学习理解(二)</title>
      <link>https://timx.cn/post/http_2/</link>
      <pubDate>Fri, 27 Jul 2018 10:42:12 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_2/</guid>
      <description>HTTP 报文  用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。 HTTP 报文本身是由多行（用 CR+LF 作换行符） 数据构成的字符串文本。
     报文首部     空行CR+LF     报文主体    HTTP报文的结构  报文首部:服务器端或客户端需处理的请求或响应的内容及属性
CR+LF:CR回车符，16进制0x0D；LF换行符，16进制0x0A
报文主体:应被发送的数据 请求报文及响应报文的结构    请求行    请求首部字段    通用首部字段    实体首部字段    其他    请求报文 
   状态行    响应首部字段    通用首部字段    实体首部字段    其他    响应报文</description>
    </item>
    
    <item>
      <title>HTTP学习理解(一)</title>
      <link>https://timx.cn/post/http_1/</link>
      <pubDate>Thu, 26 Jul 2018 13:48:11 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_1/</guid>
      <description> HTTP基础  两台计算机在使用HTTP通信在一条线路上的必须是一端为客户端， 一端为服务器；
HTTP协议规定请求从客户端发出， 最后服务器端响应该请求并返回；
HTTP是不保存状态， 即无状态协议， 于是为了实现保持状态功能引入了Cookie技术；
 HTTP方法 GET：获取资源
GET方法用来请求访问已被URI识别的资源， 制定的资源经服务器端解析后返回响应内容。
POST：传输实体主体
POST方法用来传输实体的主体， 虽然GET方法也可以但一般不用GET方法传输实体的主体。
PUT：传输文件
PUT方法用来传输文件。 就像FTP协议的文件上传一样， 要求在请求报文的主体中包含文件的内容， 然后保存到请求URI指定的位置。
HEAD：获得报文首部
HEAD方法和GET方法一样， 只是不返回报文主体部分， 用于确认URI的有效性及资源更新的日期时间。
DELETE：删除文件
DELETE方法用来删除文件， 是与PUT方法相反的方法。
OPTION：询问支持的方法
OPTION方法用来查询针对请求URI指定的资源支持的方法。
TRACE：追踪路径
TRACE方法是让WEB服务器端将之前的请求通信环回给客户端的方法。
CONNECT：要求用隧道协议连接代理
CONNECT方法要求在代理服务器通信时建立隧道， 实现隧道协议进行TCP通信。
持久连接 问题：
初始的HTTP协议版本中， 每进行一次HTTP通信就要断开一次TCP连接， 随着HTTP的普及，文档中包含大量图片的情况多了起来以后， 每次请求都会造成无谓的TCP连接建立和断开，增加通信量的开销。
解决：
使用持久连接的方法。 特点是：只要任意一端没有明确的提出断开连接， 则保持TCP的连接状态。
优点：
减少了TCP连接的重复建立和断开造成的额外开销， 减轻了服务器的负载；另外，减少了开销的那部分时间， 使HTTP请求和响应不能够更早的结束， 这样WEB页面的显示速度也就相应的提高了。
使用Cookie的状态管理  Cookie会根据从服务器端发送的响应报文内的一个叫做Set—Cookie的首部字段信息， 通知保存Cookie。 当下次客户端再往该服务器发送请求时， 客户端会自动在请求报文中加入Cookie值后发送出去。
服务端发现客户端发送过来的Cookie后， 会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录， 最后得到之前的状态信息。
 </description>
    </item>
    
  </channel>
</rss>