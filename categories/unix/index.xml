<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unix on 淡淡忧愁</title>
    <link>https://timx.cn/categories/unix/</link>
    <description>Recent content in Unix on 淡淡忧愁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Aug 2018 16:47:52 +0800</lastBuildDate>
    
	<atom:link href="https://timx.cn/categories/unix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unix编程艺术(一)</title>
      <link>https://timx.cn/post/unix_art_1/</link>
      <pubDate>Thu, 02 Aug 2018 16:47:52 +0800</pubDate>
      
      <guid>https://timx.cn/post/unix_art_1/</guid>
      <description> UNIX哲学  原则1：你无法判断程序会在什么地方耗费运行时间。瓶颈经常出现在想不到的地方，所以别急与胡乱这个地方改代码，除非你已经证实那儿就是瓶颈所在。 原则2：估量。在你没对代码进行估量，特别是没找到最耗时的那部分之前，别去优化速度。 原则3：花哨的算法在n很小时通常很慢，而n通常很小。花哨算法的常数复杂度很大。除非你确定n总是很大，否则不要用花哨算法（即使n很大，也优先考虑原则2）。 原则4：花哨的算法比简单算法更容易出bug、更难实现。尽量使用简单的算法配合简单的数据结构。（拿不准就穷举） 原则5：数据压倒一切。如果已经选择了正确的数据结构并且把一切都组织得井井有条，正确的算法也就不言自明。编程的核心是数据结构，而不是算法。 原则6：没有原则6。  从整体来说，可以概括为：  模块原则：使用简洁的接口拼合简单的部件。 清晰原则：清晰胜于机巧。 组合原则：设计时考虑拼接组合。 分离原则：策略同机制分离，接口同引擎分离。 简洁原则：设计要简洁，复杂度能低则低。 吝啬原则：除非确无它法，不要编写庞大的程序。 透明性原则：设计要可见，以便审查和调试。 健壮原则：健壮源于透明与简洁。 表示原则：把知识叠入数据以求逻辑质朴而健壮。 通俗原则：接口设计避免标新立异。 缄默原则：如果一个程序没什么好说的，就沉默。 补救原则：出现异常时，马上退出并给出足够错误信息。 经济原则：宁花机器一分，不花程序员一秒。 生成原则：避免手工hack，尽量编写程序去生成程序。 优化原则：雕琢前先要有原型，跑之前先学会走。 多样原则：决不相信所谓“不二法门”的断言。 扩展原则：设计着眼未来，未来总比预想来得快。  UNIX “KISS” 原则 Keep It Simple , Stupid ! 简单就是美 !
应用哲学  只要可行，一切都应该做成与来源和目标无关的过滤器。 数据流应尽可能文本化（这样可以使用标准工具来查看和过滤）。 数据库部署和应用协议应尽可能文本化（让人可以阅读和编辑）。 复杂的前端（用户界面）和后端应该泾渭分明。 如果可能，用C编写前，先用解释性语言搭建原型。 当且仅当只用一门语言编程会提高程序复杂度时，混用语言编程才比单一语言编程来得好。 宽收严发（对接收的东西要包容，对输出的东西要严格）。 过滤时，不需要丢弃的信息决不丢。 小就是美。在确保完成任务的基础上，程序功能尽可能少。  </description>
    </item>
    
  </channel>
</rss>