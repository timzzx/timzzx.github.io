<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C语言 on 淡淡忧愁</title>
    <link>https://timx.cn/categories/c%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in C语言 on 淡淡忧愁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Aug 2018 11:48:10 +0800</lastBuildDate>
    
	<atom:link href="https://timx.cn/categories/c%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C Primer Plus阅读学习(七)</title>
      <link>https://timx.cn/post/c_7/</link>
      <pubDate>Fri, 17 Aug 2018 11:48:10 +0800</pubDate>
      
      <guid>https://timx.cn/post/c_7/</guid>
      <description>数组和指针   关键字：static 运算符：&amp;amp;、*、（一元） 如何创建并初始化数组 指针（在已学过的基础上）、指针和数组的关系 编写处理数组的函数 二维数组   数组 数组由数据类型相同的一系列元素组成。需要使用数组时候，通过声明数组告诉编译器数组中内含多少元素和这些元素的类型。编译器根据这些信息正确的创建数组。
int main(void) { float candy[365]; /* 内含365个float类型元素的数组 */ char code[12]; /* 内含12个char类型元素的数组 */ int states[50]; /* 内含50个int类型元素的数组 */ ... }  初始化数组 指定初始化（C99） int arr[6] = {[5] = 212}; //把arr[5]初始化为212 对于一般的初始化，在初始化一个元素后，未初始化的元素都会设置为0.
数组边界 在使用数组时，要防止数组下标超出边界。也就是说，必须确保下标是有效的值
编译器不会检查数组下标是否使用得当。在C标准中，使用越界下标的结果是未定义的。这意味着程序看上去可以运行，但是运行结果很奇怪，或异常中止。
指定数组的大小 多维数组 初始化二维数组 其他多维数组 可以把一维数组想象成一行数据，把二维数组想象成数据表，把三维数组想象成一叠数据表。
通常，处理三维数组要使用3重嵌套循环，处理四维数组要使用4重嵌套循环。对于其他多维数组，以此类推。
指针和数组 指针提供一种以符号形式使用地址的方法。因为计算机的硬件指令非常依赖地址，指针在某种程度上把程序员想要传达的指令以更接近机器的方式表达。因此，在使用指针的程序更有效率。尤其是，指针能有效的处理数组。数组表示法其实是在变相的使用指针。
flizny == &amp;amp;flizny[0]; //数组名是该数组首元素的地址
flizny和&amp;amp;flizny[0]都表示数组首元素的内存地址（&amp;amp;是地址运算符）。两者都是常量，在程序的运行过程中，不会改变。但是，可以把它们赋值给指针变量，然后可以修改指针变量的值。
 指针的值是它所指向对象的地址。地址的表示方式依赖于计算机内部的硬件。许多计算机都是按字节编址，意思是内存中的每个字节都按顺序编号。这里，一个较大对象的地址（如double类型的变量）通常是该对象第一个字节的地址。 在指针前面使用*运算符可以得到该指针所指向对象的值。 指针加1，指针的值递增它所指向类型的大小（以字节为单位）  dataes + 2 == &amp;amp;dates[2] // 相同的地址 *(dates+2) == dates[2] // 相同的值</description>
    </item>
    
    <item>
      <title>C Primer Plus阅读学习(六)</title>
      <link>https://timx.cn/post/c_6/</link>
      <pubDate>Thu, 16 Aug 2018 14:53:06 +0800</pubDate>
      
      <guid>https://timx.cn/post/c_6/</guid>
      <description>字符输入/输出和输入验证   更详细得介绍输入、输出以及缓冲输入和无缓冲输入的区别 如何通过键盘模拟文件结尾条件 如何使用重定向把程序和文件相连接 创建更友好的用户界面   函数   关键字：return 运算符：*（一元）、&amp;amp;（一元） 函数及其定义方式 如何使用参数和返回值 如何把指针变量用作函数参数 函数类型 ANSI C原型 递归    函数是完成特定任务的独立程序代码单元。语法规则定义了函数的结构和使用方式。
 函数类型  声明函数时必须声明函数的类型。带返回值的函数类型应该与其返回值类型相同，而没有返回值的函数应声明void类型。如果没有声明函数的类型。 类型声明是函数定义的一部分。要记住，函数类型指的是返回值的类型，不是函数参数的类型。
 递归  C允许函数调用它自己，这种调用过程称为递归。递归有时候年以捉摸，有时候却很方便实用。结束递归是使用递归的难点，如果递归代码中没有终止递归的条件测试部分，一个调用自己的函数会无限递归。可以使用循环的地方通常都可以使用递归。有时用循环解决问题比较好，但有时用递归更好。递归的方案更简洁，但效率却没有循环高。
 尾递归  最简单的递归形式是把递归调用置于函数的末尾，即正好在return语句之前。这种形式的递归被称为尾递归，因为递归调用在函数的末尾。尾递归是最简单的递归形式，因为它相当于循环。
 递归的优缺点  递归既有优点也有缺点。优点是递归为某些编程问题提供了最简单的解决方案。缺点是一些递归算法会快速消耗计算机的内存资源。另外，递归不方便阅读和维护。
 查询地址：&amp;amp;运算符  指针是C语言最重要的概念之一，用于存储变量的地址。前面使用的scanf()函数中就使用地址作为参数。
 指针简介  指针？什么是指针？从根本上看，指针是一个值为农村地址的变量（或数据对象）。正如char类型变量的值是字符，int类型变量是整数，指针变量的值是地址。在C语言中，指针有许多用法。
 间接运算符：* 地址运算符：&amp;amp;
一般注解：
后跟一个变量名时，&amp;amp;给出该变量的地址。
示例：
&amp;amp;nurse表示变量nurse的地址。
地址运算符：*
一般注解：
后跟一个指针名或地址时，*给出储存在指针指向地址上的值。
示例：
nurse=22；
ptr = &amp;amp;nurse； //指向nurse的指针
val = *ptr； //把ptr指向的地址上的值赋给val</description>
    </item>
    
    <item>
      <title>C Primer Plus阅读学习(五)</title>
      <link>https://timx.cn/post/c_5/</link>
      <pubDate>Thu, 16 Aug 2018 13:11:30 +0800</pubDate>
      
      <guid>https://timx.cn/post/c_5/</guid>
      <description>C控制语句：循环   关键字：for、while、do while 运算符：&amp;lt;、&amp;gt;、&amp;gt;=、&amp;lt;=、!=、==、+=、*=、-=、/=、%= 函数：fabs() C语言3种循环：for、while、do while 使用关系运算符构建控制循环的表达式 其他运算符 循环常用的数组 编写有返回值的函数   一门语言应该提供3中形式的程序流
 执行语句序列 如果满足某些条件就重复执行语句序列（循环） 通过测试选择执行哪一个语句序列（分支）  while循环 while( expression ) statement
终止while循环  while循环有一点非常重要：在构建while循环时，必须让测试表达式的值有变化，表达式最终要为假。否则，循环就不会终止。
 for循环 for循环把3个行为（初始化、测试和更新）组合在一处。
C控制语句：分支和跳转   关键字：if、else、switch、continue、break、case、default、goto 运算符：&amp;amp;&amp;amp;、||、?: 函数：getchar()、putchar()、ctype.h系列 如何使用if和if else语句，如何嵌套它们 在更复杂的测试表达式中用逻辑运算符组合关系表达式 C的条件运算符 switch语句 break、continue和goto语句 使用C的字符I/O函数：getchar()和putchar() ctype.h头文件提供的字符分析函数系列   ctype.h头文件中的字符测试函数
   函数名 如果是下列参数时，返回值为真     isalnum() 字母数字（字母或数字）   isalpha() 字母   isblank() 标准的空白字符（空格、水平制表符或换行符）或任何其他本地化指定为空白的字符   iscntrl() 控制字符，如Ctrl+B   isdigit() 数字   isgraph() 除空格之外的任意可打印字符   islower() 小写字母   isprint() 可打印字符   ispunct() 标点符号（除空格或字母数字字符以外的任何可打印字符）   isspace() 空白字符（空格、换行符、换页符、回车符、垂直制表符、水平制表符或其他本地化定义的字符）   isupper() 大写字母   isxdigit() 十六进制数字符    ctype.</description>
    </item>
    
    <item>
      <title>C Primer Plus阅读学习(四)</title>
      <link>https://timx.cn/post/c_4/</link>
      <pubDate>Wed, 15 Aug 2018 10:15:30 +0800</pubDate>
      
      <guid>https://timx.cn/post/c_4/</guid>
      <description>运算符、表达式和语句   关键字：while、typedef 运算符：=、-、*、/、%、++、&amp;ndash;、（类型名） C语言的各种运算符，包括用于普通数学运算的运算符 运算符优先级以及语句、表达式的含义 while循环 复合语句、自动类型转换和强制类型转换 如何编写带有参数的函数   运算符优先级（从高至低）    运算符 结合律     () 从左往右   +-(一元) 从右往左   */ 从左往右   +-(二元) 从左往右   = 从右往左    sizeof运算符和size_t类型  size_t intsize;
intsize = sizeof(int)
  typedef double real;
real deal;
 real就是double的别名。
不要自作聪明   如果一个变量出现在一个函数的多个参数中，不要对该变量使用递增或递减运算符 如果一个变量多次出现在一个表达式中，不要对该变量使用递增或递减运算符   表达式和语句  表达式由运算符和运算对象组成。最简单的表达式是一个单独的运算对象，以此为基础可以建立复杂的表达式。</description>
    </item>
    
    <item>
      <title>C Primer Plus阅读学习(三)</title>
      <link>https://timx.cn/post/c_3/</link>
      <pubDate>Tue, 14 Aug 2018 16:31:02 +0800</pubDate>
      
      <guid>https://timx.cn/post/c_3/</guid>
      <description>字符串和格式化输入/输出   函数 strlen() 关键字 const 字符串 如何创建、存储字符串 如何使用strlen()函数获取字符串的长度 用C预处理器指令#define和ANSIC的const修饰符创建符号常量   #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; //提供 strlen() 函数 的 原型 #define DENSITY 62.4 //人体密度（单位：磅/立方英尺） int main() { float weight,volume; int size,letters; char name[40]; //name是一个可容纳40个字符的数组 printf(&amp;quot;Hi! What&#39; s your first name?\n&amp;quot;); scanf(&amp;quot;%s&amp;quot;, name); printf(&amp;quot;%s, what&#39;s your weight in pounds?\n&amp;quot;, name); scanf(&amp;quot;%f&amp;quot;, &amp;amp;weight); size = sizeof name; letters = strlen(name); volume = weight / DENSITY; printf(&amp;quot;Well, %s, your volume is %2.</description>
    </item>
    
    <item>
      <title>C Primer Plus阅读学习(二)</title>
      <link>https://timx.cn/post/c_2/</link>
      <pubDate>Sat, 11 Aug 2018 13:46:01 +0800</pubDate>
      
      <guid>https://timx.cn/post/c_2/</guid>
      <description>数据与C 接上一篇
整数  整数是没有小数部分的数。计算机以二进制数字存储整数。
比如整数7以二进制写诗111，要在8位字节中存储数字，需要把前五位都设置成0，后3位设置成1.00000111字长8位-----2²2¹2º------421整数7
 浮点数  在一个值后面加上一个小数点，该值就成为一个浮点值。所以，7是整数，7.00是浮点数。 + 整数没有小数部分，浮点数有小数部分。 + 浮点数可以表示的范围比整数大。 + 对于一些算数运算（如，两个很大的数相减），浮点数损失的精度更多。 + 因为在任何区间内（如1.0到2.0之间）都存在无穷多个实数，所以计算机的浮点数不能表示区间内所有的值。浮点数通常只是实际值的近似值。 + 过去，浮点运算比整数运算慢。不过，现在许多CPU都包含浮点处理器，缩小了速度上的差距。
 C语言基本类型  整数类型 int类型 short int类型简写short long int或者long。与int类似，long是由符号类型。 long long int或long long unsigned int或unsigned只用于非负值的场合。   字符char类型  char类型用于存储字符（字母或标点符号），但是从技术层面看，char是整数类型。
计算机使用数字编码来处理字符，即用特定的整数表示特定的字符。
 转义序列    转义序列 含义     \a 警报（ANSI C）   \b 退格   \f 换页   \n 换行   \r 回车   \t 水平制表符   \v 垂直制表符   \ 反斜杠（\）   \&amp;rsquo; 单引号   \&amp;rdquo; 双引号   \?</description>
    </item>
    
    <item>
      <title>C Primer Plus阅读学习(一)</title>
      <link>https://timx.cn/post/c_1/</link>
      <pubDate>Fri, 10 Aug 2018 14:25:05 +0800</pubDate>
      
      <guid>https://timx.cn/post/c_1/</guid>
      <description>C 语言概述 多个函数实例 /* two_ func. c -- 一个文件中包含两个函数 */ #include &amp;lt;stdio.h&amp;gt; void butler(void); /* ANSI/ISO C函数原型 */ int main(void) { printf(&amp;quot;I will summon the butler function.\ n&amp;quot;); butler(); printf(&amp;quot;Yes.Bring me some tea and writeable DVDs.\ n&amp;quot;); return 0; } void butler(void) /* 函数 定义 开始 */ { printf(&amp;quot;You rang,sir?\ n&amp;quot;); }  关键字和保留标识符    &amp;mdash; &amp;mdash; &amp;mdash; &amp;mdash;     auto extern short while   break float signed _Alignas   case for sizeof _Alignof   char goto static _Atomic   const if struct _Bool   continue inline switch _Complex   default int typedef _Generic   do long union _Imaginary   double register unsigned _Noreturn   else restrict void _Static_assert   enum return volatile _Thread_local    数据与C C语言的数据类型关键字    最初K&amp;amp;R给出的关键字 C90标准添加的关键字 C99标准添加的关键字     int signed _Bool   long void _Complex   short  _Imaginary   unsigned     char     float     double      通过这些关键字创建的类型，按计算机的储存方式可分为两大基本类型：整数类型和浮点数类型。</description>
    </item>
    
  </channel>
</rss>