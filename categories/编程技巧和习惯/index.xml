<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程技巧和习惯 on 淡淡忧愁</title>
    <link>https://timx.cn/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%E5%92%8C%E4%B9%A0%E6%83%AF/</link>
    <description>Recent content in 编程技巧和习惯 on 淡淡忧愁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Aug 2018 10:49:44 +0800</lastBuildDate>
    
	<atom:link href="https://timx.cn/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%E5%92%8C%E4%B9%A0%E6%83%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>php Curl遇到的坑</title>
      <link>https://timx.cn/post/code_2/</link>
      <pubDate>Fri, 31 Aug 2018 10:49:44 +0800</pubDate>
      
      <guid>https://timx.cn/post/code_2/</guid>
      <description>curl是什么 curl 模拟浏览器请求，可以获取内容，支持浏览器类型，cookie和ip等。curl性能上也比file_get_contents高，所以一般获取api都用curl方式。
curl在使用过程发现的问题 首先，curl是网络访问，php不同项目通信时候使用curl来调用http，非常消耗性能。
例子1：前端有多个获取用户id的api，如果用户存在就直接返回用户id，不存在就用curl的方式调用一个单进程顺序处理注册用户写入数据库的http协议的api。
问题来了：测试如果把创建用户当如前端的api中处理，100并发，10000人次 qps有300左右，出现的问题就是数据库有重复数据，然后把创建用户的功能抽取使用单进程模式顺序插入，前端api用curl的方式调用，100并发，10000人次 qps只有15左右。性能以数量级下降，需要解决。
解决办法：把创建用户的http服务改成tcp协议的服务。前端api使用socket连接tcp。测试 100并发，10000人次 qps300左右。性能恢复。问题解决。
思考：php调用curl非常消耗性能，如果内部服务通信建议使用tcp的方式。（curl为什么这么消耗性能暂时没有找到具体原因，待查）
例子2：我们需要用curl来请求第三方的api，测试发现2000次访问有20几次失败。
思考：由于第三方是跨地域的，延迟有200ms左右，有一定的丢包率，这种网络情况是没法避免的，还有本身我需要带证书访问https的一个api，这也有一定的连接失败的可能。那么我们解决这中网络问题首先要测试失败率千分之5以下公司能接受。那么我之前的测试失败率达到了百分之1以上了肯定不能接受，那么一定需要加上重连机制。
继续测试：加上重连机制（一次重连）测试6000次，一次成功5970几次 重连成功30几次，失败0次。几次测试下来结果差不多，失败都是0次。
那么，问题解决。
再次在内网环境下测试，发现万次都没有失败的情况出现。
再次思考：在跨机房跨地域的网络访问是有一定几率出现问题的。所以在涉及此类型问题时，一定要测试失败率，如果是自己的服务，尽量放在相同局域网内（很关键）。</description>
    </item>
    
    <item>
      <title>编程习惯</title>
      <link>https://timx.cn/post/code/</link>
      <pubDate>Fri, 24 Aug 2018 13:42:53 +0800</pubDate>
      
      <guid>https://timx.cn/post/code/</guid>
      <description>编程习惯 1.写功能前先准备好日志记录，查询的工作。这个非常重要，可以减少后期排查问题的时间，减少手足无措。
2.模块化要提前考虑，方便后期修改。一定要减少复杂度，不要所有的东西全部放在一个方法中。
3.写完功能测试最需要的是压力测试，这样能尽量减少上线之前功能在高并发下出现问题的几率，提高程序的健壮性。
这些事情肯定会牺牲编程的时间，不过经过这几年的编程过程中发现按照上面的做法做，后期排查问题能带来极大的便利，减少程序出错的几率。</description>
    </item>
    
  </channel>
</rss>