<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>淡淡忧愁</title>
    <link>https://timx.cn/</link>
    <description>Recent content on 淡淡忧愁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Aug 2018 15:08:36 +0800</lastBuildDate>
    
	<atom:link href="https://timx.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unix编程艺术(三)</title>
      <link>https://timx.cn/post/unix_art_3/</link>
      <pubDate>Fri, 03 Aug 2018 15:08:36 +0800</pubDate>
      
      <guid>https://timx.cn/post/unix_art_3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Unix编程艺术(二)</title>
      <link>https://timx.cn/post/unix_art_2/</link>
      <pubDate>Fri, 03 Aug 2018 10:20:36 +0800</pubDate>
      
      <guid>https://timx.cn/post/unix_art_2/</guid>
      <description> 模块性  保持清晰，保持简洁
Unix 重视模块化、正交性和紧凑性问题。
 封装与最佳模块大小  封装良好的模块不会过多的向外部暴露自身的细节，不会直接调用其他模块的实现码，也不会胡乱共享全局数据。 模块之间通过应用程序编写的接口（API）— 一组严密、定义良好的程序调用和数据结构来通信。 API在模块间扮演双重角色。在实现层面，作为模块间的滞塞点组织各自的内部细节被相邻模块知晓；在设计层面，API真正定义了整个体系。 模块最佳的物理行数在400-800行。  紧凑性  一个设计是否能装进人脑中的特性紧凑也不意味着“小巧”。即使一个设计良好的系统，对有经验的用户来说没什么特异之处、“一眼”就能看懂，但仍然可能包含很多部分。—Ken Arnold
 正交性  只做好一件事。纯粹的正交设计中，任何操作均无副作用：每个动作只改变一件事，不会影响其他。
 SPOT原则  Don&amp;rsquo;t Repeat Yourself !任何一个知识点在系统内都应当有一个唯一、明确、权威的表述。这个原则也叫“真理的单点性（Single Point of Truth）”或者SPOT原则。
 软件层次设计  自底向上从具体到抽象，从问题确定具体操作向上进行。
  自顶向下从抽象到具体，从最高层面描述整个项目的规格说明或应用逻辑开始，向下进行，直到各个具体操作。
 模块式编码 以下问题，有助于提高代码的模块性
  有多少全局变量  全局变量对模块化是毒药，很容易使各模块轻率、混乱的互相泄露信息  单个模块的大小是否在“最佳范围”内？  “不，很多都超过”，就可能产生长期的维护问题。 不知道自己或合作者的最佳范围是多少，那么保持最佳范围的下限-400行。  模块内的单个函数是不是太大了？  与其说这是一个行数问题，不如说是一个内部复杂度问题。如果不能用一句话来简单描述一个函数与其调用程序之间的约定，这个函数可能太大了.  代码是不是有内部API 可作为单元向其他人描述的函数调用集合数据结构集，并且每个单元都封装某一层次函数，不受其他代码的影响？ API的入口点是不是超过七个？有没有类有七个以上的方法？数据结构的成员是不是超过七个？ 整个项目中每个模块的入口点数量如何分布？是不是不均匀？   </description>
    </item>
    
    <item>
      <title>Unix编程艺术(一)</title>
      <link>https://timx.cn/post/unix_art_1/</link>
      <pubDate>Thu, 02 Aug 2018 16:47:52 +0800</pubDate>
      
      <guid>https://timx.cn/post/unix_art_1/</guid>
      <description>UNIX哲学  原则1：你无法判断程序会在什么地方耗费运行时间。瓶颈经常出现在想不到的地方，所以别急与胡乱这个地方改代码，除非你已经证实那儿就是瓶颈所在。 原则2：估量。在你没对代码进行估量，特别是没找到最耗时的那部分之前，别去优化速度。 原则3：花哨的算法在n很小时通常很慢，而n通常很小。花哨算法的常数复杂度很大。除非你确定n总是很大，否则不要用花哨算法（即使n很大，也优先考虑原则2）。 原则4：花哨的算法比简单算法更容易出bug、更难实现。尽量使用简单的算法配合简单的数据结构。（拿不准就穷举） 原则5：数据压倒一切。如果已经选择了正确的数据结构并且把一切都组织得井井有条，正确的算法也就不言自明。编程的核心是数据结构，而不是算法。 原则6：没有原则6。  从整体来说，可以概括为：  模块原则：使用简洁的接口拼合简单的部件。 清晰原则：清晰胜于机巧。 组合原则：设计时考虑拼接组合。 分离原则：策略同机制分离，接口同引擎分离。 简洁原则：设计要简洁，复杂度能低则低。 吝啬原则：除非确无它法，不要编写庞大的程序。 透明性原则：设计要可见，以便审查和调试。 健壮原则：健壮源于透明与简洁。 表示原则：把知识叠入数据以求逻辑质朴而健壮。 通俗原则：接口设计避免标新立异。 缄默原则：如果一个程序没什么好说的，就沉默。 补救原则：出现异常时，马上退出并给出足够错误信息。 经济原则：宁花机器一分，不花程序员一秒。 生成原则：避免手工hack，尽量编写程序去生成程序。 优化原则：雕琢前先要有原型，跑之前先学会走。 多样原则：决不相信所谓“不二法门”的断言。 扩展原则：设计着眼未来，未来总比预想来得快。  UNIX “KISS” 原则  Keep It Simple , Stupid ! 简单就是美 !
 应用哲学  只要可行，一切都应该做成与来源和目标无关的过滤器。 数据流应尽可能文本化（这样可以使用标准工具来查看和过滤）。 数据库部署和应用协议应尽可能文本化（让人可以阅读和编辑）。 复杂的前端（用户界面）和后端应该泾渭分明。 如果可能，用C编写前，先用解释性语言搭建原型。 当且仅当只用一门语言编程会提高程序复杂度时，混用语言编程才比单一语言编程来得好。 宽收严发（对接收的东西要包容，对输出的东西要严格）。 过滤时，不需要丢弃的信息决不丢。 小就是美。在确保完成任务的基础上，程序功能尽可能少。  Unix哲学与其他哲学的比较 不同的操作系统相关的设计和编程风格可以追溯的三个源头  操作系统设计者的意图。 成本和编程环境的限制对设计的均衡影响。 文化随机漂移，传统无非就是先入为主。  操作系统的风格元素  Unix &amp;ldquo;一切皆文件&amp;rdquo; 模型及在此基础上建立的管道概念
  操作系统的同一理念</description>
    </item>
    
    <item>
      <title>HTTP学习理解(六)</title>
      <link>https://timx.cn/post/http_6/</link>
      <pubDate>Wed, 01 Aug 2018 13:49:27 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_6/</guid>
      <description>HTTP 的缺点 到现在为止， 我们已了解到 HTTP 具有相当优秀和方便的一面，然而 HTTP 并非只有好的一面，事物皆具两面性，它也是有不足之处的。
HTTP 主要有这些不足，例举如下。
 通信使用明文（不加密），内容可能会被窃听 不验证通信方的身份， 因此有可能遭遇伪装 无法证明报文的完整性， 所以有可能已遭篡改  这些问题不仅在 HTTP 上出现， 其他未加密的协议中也会存在这类问题。
除此之外，HTTP 本身还有很多缺点。而且，还有像某些特定的 Web 服务器和特定的 Web 浏览器在实际应用中存在的不足（也可以说成是脆弱性或安全漏洞），另外，用 Java 和 PHP 等编程语言开发的 Web 应用也可能存在安全漏洞。</description>
    </item>
    
    <item>
      <title>HTTP学习理解(五)</title>
      <link>https://timx.cn/post/http_5/</link>
      <pubDate>Tue, 31 Jul 2018 14:08:30 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_5/</guid>
      <description> HTTP首部 HTTP报文首部 HTTP请求报文： 在请求中， HTTP报文由方法， URL， HTTP版本和HTTP首部字段等构成；
HTTP响应报文： 在响应中， HTTP报文由HTTP版本， 状态码， HTTP首部三个部分组成。
HTTP首部字段 在客户端和服务器之间以HTTP协议进行通信的过程中， 无论是请求还是响应都会使用到首部 字段， 它能起到传递额外重要信息的作用。
四种HTTP首部字段类型： &amp;nbsp;通用首部字段（General Header Fields）:请求报文和响应报文两方都会使用的首部；
&amp;nbsp;请求首部字段（Request Header Fields）:从客户端向服务器发送请求报文时使用的首部。补充了请求的附加内容，客户端的信息，响应内容相关的优先级等信息。
&amp;nbsp;响应首部字段（Response Header Fields）:从服务器向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。
&amp;nbsp;实体首部字段（Entity Header Fields）:针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。
HTTP首部字段一览表 通用首部字段    首部字段名 说明     Cache-Control 控制缓存的行为   Connection 逐跳首部， 连接的管理   Date 创建报文的日期时间   Pragna 报文指令   Trailer 报文末端的首部一览   Transfer-Encoding 指定报文主体的传输编码方式   Upgrade 升级为其他协议   Via 代理服务器的相关信息   Warning 错误通知    请求首部字段    首部字段名 说明     Accept 用户代理可处理的媒体类型   Accept—Charset 优先的字符集   Accept-Encoding 优先的内容编码   Accept-Language 优先的语言（自然语言）   Authorization Web认证信息   Expect 期待服务器的指定行为   From 用户的电子邮箱地址   Host 请求资源所在服务器   if-Match 比较实体标记（ETag）   if-Modified-Since 比较资源的更新时间   if-None-Match 比较实体标记（与if-Match相反）   if-Range 资源为更新时发送实体Byte的范围请求   if-Unmodified-Since 比较资源的更新时间（与if-Modified-Since相反）   Max-Forwards 最大传输逐跳数   Proxy-Authorization 代理服务器要求客户端的认证信息   Range 实体字节范围请求   Referer 对请求中的URL的原始获取方法   TE 传输编码的优先级   User-Agent HTTP客户端程序的信息    响应首部字段    首部字段名 说明     Accept-Ranges 是否接受字节范围请求   Age 推算资源创建经过时间   ETag 资源的匹配信息   Location 令客户端重定向至指定的URL   Proxy-Authenticate 代理服务器对客户端的认证信息   Rety-After 对再次发起请求的时机要求   Server HTTP服务器的安装信息   Vary 代理服务器缓存的管理信息   WWW-Authenticate 服务器对客户端的认证信息    实体首部字段    首部字段名 说明     Allow 资源科支持的HTTP方法   Content-Encoding 实体主体适用的编码方式   Content-Language 实体主体的自然语言   Content-Length 实体主体的大小（单位：字节）   Content-Location 替代对资源的URL   Content-MD5 实体主体的报文摘要   Content-Range 实体主体的位置范围   Content-Type 实体主体的媒体类型   Expires 实体主体过期的日期时间   Last-Modified 资源的最后修改日期时间    为Cookie服务的首部字段    首部字段名 说明 首部类型     Set-Cookie 开始状态管理所有的Cookie信息 响应首部字段   Cookie 服务器接收到的Cookie信息 请求首部字段    Set—Cookie字段的属性    属性 说明     NAME=VALUE 赋予Cookie的名称和其值   expires=DATE Cookie的有效期（若不mingque指定则默认为浏览器关闭前为止）   path=PATH 将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的目录）   domain=域名 作为Cookie适用对象的域名（若不指定则默认为创建Cookie的服务器的域名）   Scure 仅在HTTPS安全通信时才会发送Cookie   HttpOnly 加以限制， 使Cookie不能被JavaScript脚本访问    </description>
    </item>
    
    <item>
      <title>HTTP学习理解(四)</title>
      <link>https://timx.cn/post/http_4/</link>
      <pubDate>Sat, 28 Jul 2018 13:18:11 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_4/</guid>
      <description>与HTTP协作的Web服务器 用单台虚拟主机实现多个域名 HTTP/1.1规范允许一台HTTP服务器搭建多个Web站点。 即使物理层面只有一台服务器， 但只 要使用虚拟主机的功能， 则可以假想已具有多台服务器。
通信数据转发程序 代理 接收客户端的请求并转发给服务器， 同时也接收服务器的响应返回给客户端。
使用代理服务器的理由： 利用缓存技术减少带宽的流量， 组织内部针对网站的控制， 以获取访问日志为主要目的等。
代理按照使用方法的分类： 缓存代理：代理转发响应式， 缓存代理会先将资源的副本保存在代理服务器上。 透明代理：转发请求或响应时， 不对报文做任何加工的代理类型称为透明代理， 反之则 称为非透明代理。
网关 接收客户端发过来的请求并对其进行处理。 网关的工作机制和代理十分相似。 而且网关能使通信线路上的服务器提供非HTTP协议服务。 利用网关还能提高通信的安全性， 因为在客户端与网关之间的通信线路上加密以确保连接的 安全。
隧道 在相隔甚远的客户端和服务器两者之间进行中转， 并保持双方通信连接的应用程序。 隧道可按照要求建立起一条与其他服务器的通信线路， 届时使用SSL等加密手段进行通信。 隧 道的目的是确保客户端能与服务器进行安全的通信。 隧道本身并不会去解析HTTP请求， 隧道 会在通信双方断开连接时结束。</description>
    </item>
    
    <item>
      <title>HTTP学习理解(三)</title>
      <link>https://timx.cn/post/http_3/</link>
      <pubDate>Fri, 27 Jul 2018 13:43:49 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_3/</guid>
      <description>返回结果的HTTP状态码     类别 原因短语     1xx Informational（信息性状态码） 接收的请求正在处理   2xx Success（成功状态码） 请求正常处理完毕   3xx Redirection（重定向状态码） 需要进行附加操作以完成请求   4xx Client Error（客户端错误状态码） 服务器无法处理请求   5xx Server Error（服务器错误状态码） 服务器处理请求出错    
   状态码 英文名称 中文描述     100&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Continue 继续。客户端应继续其请求   101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议      200 OK 请求成功。一般用于GET与POST请求   201 Created 已创建。成功请求并创建了新的资源   202 Accepted 已接受。已经接受请求，但未处理完成   203 Non-Authoritative Information 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本   204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档   205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域   206 Partial Content 部分内容。服务器成功处理了部分GET请求      300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择   301 Moved Permanently 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替   302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI   303 See Other 查看其它地址。与301类似。使用GET和POST请求查看   304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源   305 Use Proxy 使用代理。所请求的资源必须通过代理访问   306 Unused 已经被废弃的HTTP状态码   307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向      400 Bad Request 客户端请求的语法错误，服务器无法理解   401 Unauthorized 请求要求用户的身份认证   402 Payment Required 保留，将来使用   403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求   404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&#34;</description>
    </item>
    
    <item>
      <title>HTTP学习理解(二)</title>
      <link>https://timx.cn/post/http_2/</link>
      <pubDate>Fri, 27 Jul 2018 10:42:12 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_2/</guid>
      <description>HTTP 报文  用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。 HTTP 报文本身是由多行（用 CR+LF 作换行符） 数据构成的字符串文本。
     报文首部     空行CR+LF     报文主体    HTTP报文的结构  报文首部:服务器端或客户端需处理的请求或响应的内容及属性
CR+LF:CR回车符，16进制0x0D；LF换行符，16进制0x0A
报文主体:应被发送的数据 请求报文及响应报文的结构    请求行    请求首部字段    通用首部字段    实体首部字段    其他    请求报文 
   状态行    响应首部字段    通用首部字段    实体首部字段    其他    响应报文</description>
    </item>
    
    <item>
      <title>HTTP学习理解(一)</title>
      <link>https://timx.cn/post/http_1/</link>
      <pubDate>Thu, 26 Jul 2018 13:48:11 +0800</pubDate>
      
      <guid>https://timx.cn/post/http_1/</guid>
      <description> HTTP基础  两台计算机在使用HTTP通信在一条线路上的必须是一端为客户端， 一端为服务器；
HTTP协议规定请求从客户端发出， 最后服务器端响应该请求并返回；
HTTP是不保存状态， 即无状态协议， 于是为了实现保持状态功能引入了Cookie技术；
 HTTP方法 GET：获取资源
GET方法用来请求访问已被URI识别的资源， 制定的资源经服务器端解析后返回响应内容。
POST：传输实体主体
POST方法用来传输实体的主体， 虽然GET方法也可以但一般不用GET方法传输实体的主体。
PUT：传输文件
PUT方法用来传输文件。 就像FTP协议的文件上传一样， 要求在请求报文的主体中包含文件的内容， 然后保存到请求URI指定的位置。
HEAD：获得报文首部
HEAD方法和GET方法一样， 只是不返回报文主体部分， 用于确认URI的有效性及资源更新的日期时间。
DELETE：删除文件
DELETE方法用来删除文件， 是与PUT方法相反的方法。
OPTION：询问支持的方法
OPTION方法用来查询针对请求URI指定的资源支持的方法。
TRACE：追踪路径
TRACE方法是让WEB服务器端将之前的请求通信环回给客户端的方法。
CONNECT：要求用隧道协议连接代理
CONNECT方法要求在代理服务器通信时建立隧道， 实现隧道协议进行TCP通信。
持久连接 问题：
初始的HTTP协议版本中， 每进行一次HTTP通信就要断开一次TCP连接， 随着HTTP的普及，文档中包含大量图片的情况多了起来以后， 每次请求都会造成无谓的TCP连接建立和断开，增加通信量的开销。
解决：
使用持久连接的方法。 特点是：只要任意一端没有明确的提出断开连接， 则保持TCP的连接状态。
优点：
减少了TCP连接的重复建立和断开造成的额外开销， 减轻了服务器的负载；另外，减少了开销的那部分时间， 使HTTP请求和响应不能够更早的结束， 这样WEB页面的显示速度也就相应的提高了。
使用Cookie的状态管理  Cookie会根据从服务器端发送的响应报文内的一个叫做Set—Cookie的首部字段信息， 通知保存Cookie。 当下次客户端再往该服务器发送请求时， 客户端会自动在请求报文中加入Cookie值后发送出去。
服务端发现客户端发送过来的Cookie后， 会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录， 最后得到之前的状态信息。
 </description>
    </item>
    
    <item>
      <title>TCP/IP的题目和问答</title>
      <link>https://timx.cn/post/tcp_11/</link>
      <pubDate>Tue, 24 Jul 2018 14:44:55 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_11/</guid>
      <description>1.OSI，TCP/IP，五层协议的体系结构，以及各层协议  OSI分层 （7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。
TCP/IP分层（4层）：网络接口层、 网际层、运输层、 应用层。
五层协议 （5层）：物理层、数据链路层、网络层、运输层、 应用层。
每一层的协议如下：
物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器）
数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机）
网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）
传输层：TCP、UDP、SPX
会话层：NFS、SQL、NETBIOS、RPC
表示层：JPEG、MPEG、ASII
应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS
每一层的作用如下：
物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）
数据链路层：将比特组装成帧和点到点的传递（帧Frame）
网络层：负责数据包从源到宿的传递和网际互连（包PackeT）
传输层：提供端到端的可靠报文传递和错误恢复（段Segment）
会话层：建立、管理和终止会话（会话协议数据单元SPDU）
表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）
应用层：允许访问OSI环境的手段（应用协议数据单元APDU）
 2.IP地址的分类  A类地址：以0开头， 第一个字节范围：1~126（1.0.0.0 - 126.255.255.255）；
B类地址：以10开头， 第一个字节范围：128~191（128.0.0.0 - 191.255.255.255）；
C类地址：以110开头， 第一个字节范围：192~223（192.0.0.0 - 223.255.255.255）；
D类地址：以1110开头，第一个字节范围：224~239（224.0.0.0 - 239.255.255.255）；（作为多播使用）
E类地址：保留
其中A、B、C是基本类，D、E类作为多播和保留使用。
以下是留用的内部私有地址：
A类 10.0.0.0&amp;ndash;10.255.255.255
B类 172.16.0.0&amp;ndash;172.31.255.255
C类 192.168.0.0&amp;ndash;192.168.255.255
IP地址与子网掩码相与得到网络号：
ip : 192.168.2.110
&amp;amp; Submask : 255.255.255.0
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-
网络号 ：192.168.2 .0
注:</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(十)</title>
      <link>https://timx.cn/post/tcp_10/</link>
      <pubDate>Mon, 23 Jul 2018 14:23:53 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_10/</guid>
      <description>TCP：传输控制协议  尽管TCP和UDP都使用相同的网络层（IP），TCP却向应用层提供与UDP完全不同的服务。TCP提供一种面向连接的、可靠的字节流服务。
面向连接意味着两个使用TCP的应用（通常是一个客户和一个服务器）在彼此交换数据之前必须先建立一个TCP连接。这一过程与打电话很相似，先拨号振铃，等待对方摘机说“喂”，然后才说明是谁。在第18章我们将看到一个TCP连接是如何建立的，以及当一方通信结束后如何断开连接。
 TCP通过下列方式来提供可靠性： 1.应用数据被分割成TCP认为最适合发送的数据块。这和UDP完全不同，应用程序产生的数据报长度将保持不变。由TCP传递给IP的信息单位称为报文段或段（segment）（参见图1-7）。在18.4节我们将看到TCP如何确定报文段的长度。
2.当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。在第21章我们将了解TCP协议中自适应的超时及重传策略。
3.当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒，这将在19.3节讨论。
4.TCP将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP将丢弃这个报文段和不确认收到此报文段（希望发端超时并重发）。
5.既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。
6.既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。
7.TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。
TCP的首部   IP首部  TCP首部  TCP数据      源端口  目标端口    32位序号    32位确认序号    4位首部长度  保留（6位）  URG  ACK  PSH  PST  SYN  FIN  16位窗口大小    16位检验和  16位紧急指针    选项    数据</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(九)</title>
      <link>https://timx.cn/post/tcp_9/</link>
      <pubDate>Mon, 23 Jul 2018 13:34:57 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_9/</guid>
      <description>DNS域名系统、TFTP简单文件传送协议、BOOTP引导程序协议 DNS域名系统  域名系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。
 DNS 报文定义了一个既可以查询也可以响应的报文格式。 1.最前面的16个 bit 唯一的标示了问题号码,用于查询端区别自己的查询。
2.紧接着的16个 bit 又可以做进一步的细分,标示了报文的性质和一些细节,比如说是查询报文还是响应报文,需要递归 查询与否(一般服务器都支持递归查询,而且不需要任何设置,BIND 就是这样)
3.查询问题后面有查询类型,包括 A,NS,CNAME,PTR,HINFO,MX,如果熟悉 BIND 的话,就知道在 zong 的配置 文件里面,每一条记录都记载了各自的类型,比如 A 就是 IP 地址,NS 就是名字服务器。
4.响应报文可以回复多个 IP,也就是说,域名可以和多个 IP 地址对应,并且有很多 CNAME。
反向查询 正向查询指的是通过域名得到 IP 的查询,而反向查询就是通过 IP 得到域名。例如用 host 命令,host ip 就可以得到服务器的域名, host domainName 就得到 IP。
稍微知道一点数据结构的人都能意识到,在正向查询的域里面做反向查询,其做法只有遍历整个数据集合&amp;mdash;-对于 DNS 来说,那 就是遍历整个数据库, 这将带来巨大的负担,所以 DNS 采取了另一种方法,使用另一棵子树来维护 IP-〉域名的对应表。这个子树的根节点是 in-addr.arpa,而一个 IP 例如192.168.11.2)所具有的 DNS 地址就是 2.11.168.192.in-addr.arpa(ip 倒置)。在 DNS 系统里面,一个 反向地址对应一个 PTR 纪录(对应 A 纪录),所以反向查询又叫 做指针(PTR)查询。</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(八)</title>
      <link>https://timx.cn/post/tcp_8/</link>
      <pubDate>Fri, 20 Jul 2018 13:25:46 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_8/</guid>
      <description>广播和多播、IGMP协议 单播,多播,广播 单播(unicast)  单播是说,对特定的主机进行数据传送。例如给某一个主机发送 IP 数据包。这时候,数据链路层给出的数据头里面是非常具体的 目的地址,对于以太网来 说,就是网卡的 MAC 地址(不是 FF-FF-FF-FF-FF-FF 这样的地址)。现在的具有路由功能的主机应该可以将 单播数据定向转发,而目的主机的网 络接口则可以过滤掉和自己 MAC 地址不一致的数据。
 广播(unicast)  广播是主机针对某一个网络上的所有主机发送数据包。这个网络可能是网络,可能是子网,还可能是所有的子网。如果是网络, 例如 A 类网址的广播就是 netid.255.255.255,如果是子网,则是 netid.netid.subnetid.255;如果是所有的子网(B 类 IP)则是则是 netid.netid.255.255。广播所用的 MAC 地址 FF-FF-FF-FF-FF-FF。网络内所有的主机都会收到这个广播数据,网卡只要把 MAC 地址为 FF-FF-FF-FF-FF-FF 的数据交给内核就可以了。一般说来 ARP,或者路由协议 RIP 应该是以广播的形式播发的。
 多播(multicast)  可以说广播是多播的特例,多播就是给一组特定的主机(多播组)发送数据,这样,数据的播发范围会小一些(实际上播发的范围 一点也没有变小),多播的 MAC 地址是最高字节的低位为一,例 如01-00-00-00-00-00。多播组的地址是 D 类 IP,规定是 224.0.0.0-239.255.255.255。
虽然多播比较特殊,但是究其原理,多播的数据还是要通过数据链路层进行 MAC 地址绑定然后进行发送。所以一个以太网卡在 绑定了一个多播 IP 地址之 后,必 定还要绑定一个多播的 MAC 地址,才能使得其可以像单播那样工作。这个多播的 IP 和多播 MAC 地址有一个对应的算法,在书的 p133到 p134之间。可以 看到 这个对应不是一一对应的,主机还是要对多播数据进行过滤。</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(七)</title>
      <link>https://timx.cn/post/tcp_7/</link>
      <pubDate>Thu, 19 Jul 2018 10:56:09 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_7/</guid>
      <description>UDP是一个简单的面向数据报的运输层协议：进程的每个输出操作都正好产生一个UDP数据报，并组装成一份待发送的IP数据报。这与面向流字符的协议不同，如TCP，应用程序产生的全体数据与真正发送的单个IP数据报可能没有什么联系。
 UDP用户数据报协议 UDP封装的IP数据报的格式    IP首部   UDP首部   UDP数据    UDP封装  1:UDP不提供可靠性：它把应用程序传给IP层的数据发送出去，但是并不保证它们能到达目的地。
2.应用程序必须关心IP数据报的长度。如果它超过网络的MTU，那么就要对IP数据报进行分片。如果需要，源端到目的端之间的每个网络都要进行分片，并不只是发送端主机连接第一个网络才这样做. UDP首部     16位源端口号   16位目的端口号     16位UDP长度   16位UDP检验和    数据（如果有）    
UDP长度字段指的是UDP首部和UDP数据的字节长度。该字段的最小值为8字节（发送一份0字节的UDP数据报是OK）。这个UDP长度是有冗余的。IP数据报长度指的是数据报全长，因此UDP数据报长度是全长减去IP首部的长度
UDP数据报和TCP段都包含一个12字节长的伪首部，它是为了计算检验和而设置的。伪首部包含IP首部一些字段。其目的是让UDP两次检查数据是否已经正确到达目的地
UDP检验和覆盖UDP首部和UDP数据。回想IP首部的检验和，它只覆盖IP的首部—并不覆盖IP数据报中的任何数据。
UDP和TCP在首部中都有覆盖它们首部和数据的检验和。UDP的检验和是可选的，而TCP的检验和是必需的。
尽管UDP检验和的基本计算方法与我们在IP首部检验和计算方法相类似（16 bit字的二进制反码和），但是它们之间存在不同的地方。首先，UDP数据报的长度可以为奇数字节，但是检验和算法是把若干个16 bit字相加。解决方法是必要时在最后增加填充字节0，这只是为了检验和的计算（也就是说，可能增加的填充字节不被传送）。
其次，UDP数据报和TCP段都包含一个12字节长的伪首部，它是为了计算检验和而设置的。伪首部包含IP首部一些字段。其目的是让UDP两次检查数据是否已经正确到达目的地（例如，IP没有接受地址不是本主机的数据报，以及IP没有把应传给另一高层的数据报传给UDP）。
UDP伪首部    32位源IP地址  32位目的IP地址   0 8位协议（17） 16位UDP长度   16位源端口号  16位目的端口号    16位UDP长度  16位UDP检验和    数据    填充字段0</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(六)</title>
      <link>https://timx.cn/post/tcp_6/</link>
      <pubDate>Wed, 18 Jul 2018 11:14:14 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_6/</guid>
      <description>RFC791中文-IP协议RFC 791 - 互联网协议
RFC:791
互联网协议
DARPA互联网程序
协议规范
1981.9
防御高级研究计划结构
信息处理技术办公室
1400 Wilson Boulevard
Arlington, Virginia 22209
南吉利福尼亚大学信息科研所
 前言  本文档详细说明叻国防部(DoD)的标准互联网协议.文档基于APRA互联网协议的前六个早期版本.很多人对规范的概念以及正文作出过贡献.这个版本对寻址(addressing),错误处理(error handling ),选项编码(option codes),以及互联网的安全(security)、优先(predence),划分(compartments)、处理限制的特性作出了修订。
Jon Postel
Editor
September 1981
 1.介绍 1.1 出发点(Motivation) Internet协议是为了在包交换(packet-switched)计算机通讯网络的互联系统中使用而设计的。我们称这样的系统为“catener”【1】。Internet协议提供从发起者(source)到目的地(destination)的块数据(数据报)的传输,发起者和目的地都是由固定长度的地址标识的主机(host)。如果需要, Internet协议也提供长数据报的分片(fragmentation)和重组(reassembly),以通过“小包”(small packet)网络传输大数据报。
1.2 范围(Scope) internet协议仅限于提供在互联网络系统上从发起者到目的地投递一个internet数据报所需的功能。不提供增强端到端(end-to-end)的可靠性,流程控制(flow control),排序(sequencing),和其它主机到主机协议上常有的服务。internet协议可以支持网络提供不同类型和不同质量的服务(The internet protocol can capitalize on the services of its supporting networks to provide various types and qualities of service.)。
1.3 接口(Interfaces) 在internet环境中,本协议被视为主机到主机(host-to-host)的协议。本协议调用本地网络协议来携带internet数据报到下一个网关或者目的主机。 比如,TCP模块调用internet模块携带一个TCP分片(该分片包含了TCP头部和用户数据)作为一个internet数据报的数据部分。TCP模块会在internet头部中提供地址(addresses)和其他参数作为调用Internet模块的参数。然后internet模块会创建一个internet数据报并且调用本地网络接口来传输internet数据报。 比如,对于ARPANET,internet模块会调用一个本地网络模块(local net module),该模块会给internet数据报添加一个1822个字节的前导字符,创建一条传输给IMP的ARPANET消息。ARPANET 地址将通过本地网络接口从internet地址中获取,该地址是ARPANET中的某些主机的地址,该主机可能是个到其他网络的网关。</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(五)</title>
      <link>https://timx.cn/post/tcp_5/</link>
      <pubDate>Tue, 17 Jul 2018 16:09:00 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_5/</guid>
      <description>ICMP协议  ICMP是（Internet Control Message Protocol）Internet控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。
IP 协议并不是一个可靠的协议,它不保证数据被送达,那么,自然的,保证数据送达的工作应该由其他的模块来完 成。其中一个重要的模块就是 ICMP(网络控制报文)协议。
 ICMP报文是在IP数据报内部    长度20字节   -     IP首部   ICMP报文    ICMP报文    类型 TYPE 8位   代码 CODE 8位   检验和 Description 16位    ICMP类型的列表  当传送 IP 数据包发生错误&amp;ndash;比如主机不可达,路由不可达等等,ICMP 协议将会把错误信息封包,然后传送回给主机。给主机 一个处理错误的机会,这 也就是为什么说建立在 IP 层以上的协议是可能做到安全的原因。ICMP 数据包由8bit 的错误类型和8bit 的代 码和16bit 的校验和组成。而前 16bit 就组成了 ICMP 所要传递的信息。</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(四)</title>
      <link>https://timx.cn/post/tcp_4/</link>
      <pubDate>Tue, 17 Jul 2018 10:41:26 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_4/</guid>
      <description>从概念上说，IP路由选择是简单的，特别对于主机来说。如果目的主机与源主机直接相连（如点对点链路）或都在一个共享网络上（以太网或令牌环网），那么IP数据报就直接送到目的主机上。否则，主机把数据报发往一默认的路由器上，由路由器来转发该数据报。大多数的主机都是采用这种简单机制。
 IP路由  IP层在内存中有一个路由表。当收到一份数据报并进行发送时，它都要对该表搜索一次。
当数据报来自某个网络接口时，IP首先检查目的IP地址是否为本机的IP地址之一或者IP广播地址。
如果确实是这样，数据报就被送到由IP首部协议字段所指定的协议模块进行处理。
如果数据报的目的不是这些地址，那么
  （1）如果IP层被设置为路由器的功能，那么就对数据报进行转发（也就是说，像下面对待发出的数据报一样处理）； （2）否则,数据报被丢弃。  路由表中的每一项都包含下面这些信息： • 目的IP地址。它既可以是一个完整的主机地址，也可以是一个网络地址，由该表目中的标志字段来指定（如下所述）。主机地址有一个非0的主机号，以指定某一特定的主机，而网络地址中的主机号为0，以指定网络中的所有主机（如以太网，令牌环网）。
• 下一站（或下一跳）路由器（next-hop router）的IP地址，或者有直接连接的网络IP地址。下一站路由器是指一个在直接相连网络上的路由器，通过它可以转发数据报。下一站路由器不是最终的目的，但是它可以把传送给它的数据报转发到最终目的。
• 标志。其中一个标志指明目的IP地址是网络地址还是主机地址，另一个标志指明下一站路由器是否为真正的下一站路由器，还是一个直接相连的接口（我们将在9.2节中详细介绍这些标志）。
• 为数据报的传输指定一个网络接口。 IP路由选择过程 1.因特网控制报文协议(lCMP)创建一个回应请求数据包
2.ICMP将此包转交给IP
3.IP协议判断目的IP地址是处在本地网络中,还是处在一个远程网络上
4.这是一个远程请求,这个数据包需要被发送到默认网关（这也就是为什么要在终端上配置网关）
5.根据ARP缓存中的网关MAC地址，将数据进行帧(Frame)的封装(此时数据已经从网络层到数据链路层）
6.帧到物理层以位(Bit)的形式传输
7.传输完成，校验数据，并向上解包，直到网络层
8.在路由表中检查其IP目的地址
9.此路由表中必须包含有目的地址网络，否则将丢弃数据，并返回&amp;ldquo;destination network unavailable&amp;rdquo;的ICMP信息，并被发送回原设备
10.数据包被交换到输出接口的缓存区
11.检查ARP缓存是否有目的地址，如果没有，则向目的主机发出ARP请求，取得地址
12.根据网关MAC地址，将数据进行帧(Frame)的封装
13.帧到物理层以位(Bit)的形式传输
14.传输完成，校验数据，并向上解包，直到网络层
15.核对IP，正确后交付给ICMP，ICMP会丢弃这个数据包，产生一个新负荷来作为回应应答
16.创建应答，添加源方和目的方的地址、协议字段和有效负荷，此时目的方设备为主机A。然后就是经历一个相反的过程，将应答返回终端A。
IP路由选择实例 实例一  在TCP/IP详解这本书中讲解IP路由选择的时候，过程讲解的比较粗略，这里详细介绍下其中的整体过程。
 如下图，现在这么一个网络。主机甲与主机乙分别在两个不同的网段上，中间通过路由器进行连接。现在假设主机甲要跟主机乙进行通信，那么主机甲如何才能够找到主机乙的位置呢?通过这个例子，跟大家详细解释IP路由选择的整个过程。在这里，以Cisco的路由器为例进行介绍。
 主机甲&amp;lt;--------------------------&amp;gt;路由器&amp;lt;--------------------------&amp;gt;主机乙 172.16.60.6 172.16.80.8   假设现在主机甲的用户利用Ping命令，来确认主机乙的连通性问题。这个网络架构虽然比较简单，但是其路由选择过程的步骤则是一步不缺的。主要通过如下步骤：
 第一步：当用户在主机甲上输入PING 172.168.80.8之后，主机甲中有一个因特网控制报文协议，英文简称为ICMP。这个协议将创建一个回应请求数据包，在它的数据域中只包含有字母。 第二步：英特网控制报文协议会将这个有效负荷(即刚创建的数据包)交给因特网协议(英文简称IP)。然后这个因特网协议也会创建一个数据包。在这个英特网协议创建的数据包中，所包含的内容要比因特网控制报文协议所创建的数据包丰富的多。在这个包中包括主机甲的IP地址、目的地主机乙的IP地址以及值为01h的协议字段。当数据包到达主机乙时，这些内容就是告诉对方，应该将这个有效负荷交给因特网控制报文协议来处理。 第三步：IP协议会判断目的IP地址是属于远程网络，还是在本地网络。由于根据IP地址规划规则，主机甲与主机已是属于不同的网络。此时，刚才英特网协议(IP)所创建的数据包将会被发送到默认的网关中去。在主机甲的网络属性配置中，除了有自身的逻辑IP地址，还有默认的网关地址。网关地址就是用来不同网络之间的主机进行通信的一扇门。只有通过网关，主机甲的数据包才能够被发送到不同网络的主机乙中。 第四步：确认路由器相应接口的MAC地址。假设主机甲(IP地址为172.168.60.6)的默认网关被配置为172.168.60.1。若主机甲的数据包要发送到这个默认网关上，则就必须知道其对应的路由器接口的物理地址，即MAC地址。因为只有如此，数据包才能够被传递到更下一层的数据链路层并根据一定的规则生成帧。然后主机甲才能够把数据包发送给172.168.60.1网络连接的路由器接口。在本地局域网上，主机只可以通过硬件地址来相互之间进行通信。所以当主机甲要把数据包发送给特定的网关时，必须要知道这个网关所对应的MAC地址。这一个过程是不可避免的。为了达到这个目的，主机甲首先会检查自己的ARP缓存，查看一个默认网关的IP地址是否已经解析为对应接口的硬件地址。如果在ARP缓存表中已经有对应的记录，表示已经被成功解析。此时，数据包将会被释放并传递到数据链路层并生成帧。其中目的方的硬件地址也将同数据包一起下传到数据链路层。通常情况下，在主机甲上，可以通过ARP命令来查看主机当前的IP地址与MAC地址的对应表。现在电脑所设置的默认网关为192.168.0.254，后面的16位字符就是默认网关所对应的硬件地址。 第五步：生成帧。当这个数据包和目的方的硬件地址被传递给数据链路层之后，局域网驱动器将用来提供媒体访问服务，以通过以太网进行数据传输。一个数据帧即将产生，使用一些控制信息来封装这个数据包。在这个数据帧中会包含有目的方和源方的硬件地址。以及以太网类型字段。这个以太网类型字段主要用来描述的是交付这个数据包到数据链路层的网络层协议。在这个帧的结尾，是一种被称作为帧校验序列的字段，它是装载循环冗余校验计算值的区域。也就是说，在这个帧中，主要包括目的MAC地址(对应路由器接口的MAC地址)、源MAC地址(主机甲的MAC地址)、以太网类型字段、数据包、帧校验序列五部分内容。注意，这里指的目的地址并不是主机乙的地址，而是离主机甲最近的默认网关地址。在第一次通信时，主机甲并不知道主机乙的MAC地址。一旦完成帧的封装，则这个帧将会被交付到物理层。如果企业网络是利用双绞线组建的话，则将会以一次一位的方式发往物理媒体。 以上五个步骤主要都是在主机甲上完成。这五个步骤执行完毕之后，IP路由选择过程的前期工作就算完成了。接下来的就要看路由器的表演了。 第六步：在主机甲所在的冲突域中的每台网络设备都将接收这些位并重新合并成数据帧。接收完毕后，他们会运行CRC过程并核对保存在帧校验序列字段中的内容。如果这两个值不匹配的话，则这个帧将会被丢弃。如果两个值相同(主机甲的默认网关，即紧邻主机甲的路由器接口)，则网络设备会接收这个帧，并核查目的方的硬件地址，检查他们是否也匹配。如果目的方的硬件地址也是匹配的，那么路由器将会查看这个帧的以太网类型字段，以了解在网络层上采用了什么协议，然后路由器就会抽出帧中的数据包，把其余部分内容丢弃。然后把抽出来的数据包传送给以太网类型字段中列出的上层协议，如英特网网络协议(IP)等等。 第七步：判断路由表项目。英特网网络协议(IP)会接收这个数据包，并检查目的IP地址。在这个案例中，由于数据包中的目的地址与接收路由器所配置的任何地址都不相匹配。此时，路由器就会在自己的路由表中，查看目的IP网络的地址。在这个案例中，由于路由器同时连接着172.16.80.0的网络。所以在这个路由器的路由表中，有相关的纪录。若没有记录的话，则这个数据包会被直接丢弃。若路由器丢弃数据包的话，则会发送一个“目标地址不可达”的错误信息给主机甲。 第八步：路由器转发数据包。如果路由器的确在他的路由表中找到了相应网络的记录，则数据包就会被转发到输出接口。在本例中，就是主机乙所连接的接口。路由器会将这个数据包交换到对应接口的缓冲区内。 第九步：缓冲区中数据的处理。路由器对应接口的缓冲区需要了解目的方主机的硬件地址。因为这个数据包中已经有目的方的IP地址，所以，路由器会先检查ARP缓存表。如果主机甲的硬件地址已经被解析并保存在路由器的ARP缓冲中，则这个数据包和这个硬件地址将被传递到数据链路层以便重新生成帧。通常情况下，若路由器以前跟主机乙通信过的话，则这个IP地址与MAC地址的对应记录将会在思科路由器ARP缓冲表中保存四个小时。连续四个小时没有通信的话，则这个对应的记录将会被删除。如果在路由器的ARP缓冲表中没有相关记录的话，则路由器接口会在其连接的网络内部，发送一个ARP请求。这个ARP请求就像一个广播，我现在需要知道IP地址为172.12.80.8的MAC地址。此时。其他网络设备发现自己不是这个IP地址，就会抛弃这个包。而主机乙发现有人在问自己的MAC地址，就会进行响应。告诉路由器，我的IP地址就是这个，我的MAC地址是多少。路由器知道目的主机乙的MAC地址之后，就会把数据包连同目的方的MAC地址传递到下一层的数据链路中。 第十步：路由器会重复上面的第五步操作，生成数据帧。并传送到物理层，以一次一位的方式再发送到物理媒体上。在网络中进行传输。 在路由器上的工作也完成。通过以上的分析，我们可以看到，路由器的作用主要就是进行数据交换。把其收到的数据包根据一定的规则转发到另一个可达的接口上。路由器就好像是一个十字路口，各个数据包都根据自己所需要到达的目的地，现在合适的出口。 第十一步：主机乙会接收到这个数据帧并运行CRC过程。如果运算结果与帧校验序列中字段的内容相同，则这个帧中目的方的MAC地址将会被读取。主机乙会判断这个MAC地址是否跟自己的MAC地址相同。若相同的话，则会抽取其中的数据包，并根据以太网字段类型中指定的协议，把数据包传递给相应的协议处理。由于这个案例中，数据包中是一个回应请求。主机乙就会把这个数据包交给ICMP协议处理。ICMP协议会应答这个请求，同时把这个数据包丢弃并迅速生成一个新的有效负荷来作为回应应答。然后主机乙会利用同样的过程把数据包以及目的MAC地址(路由器对应接口的物理地址)传递到下一层，让其生成帧。在数据帧上，会带有目的MAC地址、源MAC地址、数据包、以太网字段类型、帧校验序列字段等内容发送到下一层。然后再一位位的传送到物理媒体。 第十二步：路由器再重复第六步到第十步的过程，把数据包从一个接口交换传递到另一个接口中。然后主机甲就收到一个回应信息，表示到主机乙的道路是通的。  以上这个十二个步骤就完成了IP路由选择的全部过程。再复杂的网络，也只是中间多了几个节点，多重复了几个步骤而已。网络管理员了解了这个IP路由选择的过程，那么在日后网络故障的排查中，会更加的得心应手。</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(三)</title>
      <link>https://timx.cn/post/tcp_3/</link>
      <pubDate>Mon, 16 Jul 2018 16:13:50 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_3/</guid>
      <description>以太网帧格式 类型  Ethernet II:以太网第二版或者称之为Ethernet II帧，DIX帧，是最常见的帧类型。并通常直接被IP协议使用。 IEEE 802.3:Novell的非标准IEEE 802.3帧变种。 IEEE 802.2:逻辑链路控制 (LLC) 帧 SNAP:子网接入协议(SNAP)帧  Ethernet II通常是用于IP协议,包括的字段    字段 长度 备注     目的MAC地址 6个字节 因为后来源IP 目的IP 源端口 目的端口信息中，源始终是放在前面的，而这里目的MAC放在了前面，原因在于现在转发形式为存储转发，而在这里还有一条转发方式叫做快速转发，即只查找目的MAC地址，即直接转发，所以将目的MAC放在前面查找的过程中速度会加快   源MAC地址 6个字节 -   协议类型 2个字节 -    
   协议 标识     IPv4 0x0800   IPX 0x8137   ARP 0x0806   Pause Control 0x8808   IPv6 0x86DD    IP头部报文   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1      版本 4位  包头长度 4位  服务类型 8位  长度 16位    标识 16位  标志 3位  段偏移量 13位    TTL 4位  协议 4位  校验和 16位     源IP地址 32位    目的IP地址 32位    选项 32位    IP包头字段说明 版本：4位，指定IP协议的版本号。 包头长度(IHL)：  4位，IP协议包头的长度，指明IPv4协议包头长度的字节数包含多少个32位。</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(二)</title>
      <link>https://timx.cn/post/tcp_2/</link>
      <pubDate>Fri, 13 Jul 2018 11:25:28 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_2/</guid>
      <description>名词解释
 使用Wiresharkz抓包工具时，发现有很多协议（protocol） ARP  ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为以太网地址)。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet (PUP) 使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式 (ATM)， IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。  BROWSER  CIFS浏览器协议定义由服务器发送和接收的消息，该服务器充当网络上可用服务的交换中心，正在进行网络上可用的打印或文件共享等服务的服务器，以及请求详细信息的客户端。特别的服务。  DHCPv6  一个用来配置工作在IPv6网络上的IPv6主机所需的IP地址、IP前缀和/或其他配置的网络协议。  DNS  域名系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53[1]。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。  HTTP  超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议[1]。HTTP是万维网的数据通信的基础。  ICMPv6  是互联网控制消息协议（ICMP）在IPv6协议下的新版本。它在 RFC 4443 中被定义，其协议号（IPv6的Next Header域）为58。 ICMPv6协议定义在TCP/IP参考模型中的网络层（Internet Layer），用于报告IPv6节点数据包处理过程中的错误消息和完成一些网络诊断功能（如ping和Traceroute等）。它是IPv6体系总体的的一个组成部分，其基本的协议[1]必须被所有IPv6实现和IPv6节点所完整支持。  IGMPv3  IGMP 是Internet Group Management Protocol（互联网组管理协议）的简称。它是TCP/IP 协议族中负责IP 组播成员管理的协议，用来在IP主机和与其直接相邻的组播路由器之间建立、维护组播组成员关系。  LLDP  一种数据链路层协议，网络设备可以通过在本地网络中发送LLPDU（Link Layer Discovery Protocol Data Unit）来通告其他设备自身的状态。是一种能够使网络中的设备互相发现并通告状态、交互信息的协议。  LLMNR  在DNS 服务器不可用时，DNS 客户端计算机可以使用本地链路多播名称解析 (LLMNR—Link-Local Multicast Name Resolution)（也称为多播 DNS 或 mDNS）来解析本地网段上的名称。例如，如果路由器出现故障，从网络上的所有 DNS 服务器切断了子网，则支持 LLMNR 的子网上的客户端可以继续在对等基础上解析名称，直到网络连接还原为止。  NBNS  NBNS（网络基本输入/输出系统 (NetBIOS) 名称服务器）在基于 NetBIOS 名称访问的网络上提供主机名和地址映射方法。 NetBIOS是Network Basic Input/Output System的简称，一般指用于局域网通信的一套API，不支持路由，NetBIOS提供三种不同的服务： 名字服务：名字登记和解析；会话服务：可靠的基于连接的通信；数据包服务：不可靠的无连接通信 。在Windows下通过nbtstat -n可以查询本地NetBIOS相关信息。 NBNS是动态DNS的一种，Microsoft的NBNS实现称为WINS（Windows Internet Name Service）。WINS数据库是动态更新的。计算机每当初始化TCP/IP后都会将它的NetBIOS名和IP地址的对应关系映射到WINS服务器的数据库中。如果在局域网络中抓取并观察数据包，会发现有大量的NBNS数据包。开启了WINS的主机就会发出广播，使用UDP协议，连137端口。 如果计算机需要知道一个NetBIOS名称或者域名对应的IP地址，首先会查找本地Hosts文件和NetBIOS缓存，其次会向WINS服务器发出请求，会发出NBNS数据包，最后会联系DNS服务器进行解析。  SMB Mailslot  MB(全称是Server Message Block)是一个协议名，它能被用于Web连接和客户端与服务器之间的信息沟通。SMB最初是IBM的贝瑞·费根鲍姆（Barry Feigenbaum）研制的，其目的是将DOS操作系统中的本地文件接口“中断13”改造为网络文件系统。 公司的网络硬盘使用的协议  SSDP  构成UPnP（通用即插即用）技术的核心协议之一。它为网络客户端（network client）提供了一种发现网络服务（network services）的机制，采用基于通知和发现路由的多播方式实现。 SSDP客户端向此地址发送HTTP UDP 发现请求，查询某种类型的服务。SSDP服务在此地址上监听服务发现请求。当服务监听到的HTTP UDP 发现请求和它自己提供的服务匹配时，它以单播方式发送HTTP UDP 响应。  SSL  SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。  STP  STP（Spanning Tree Protocol）是生成树协议的英文缩写。该协议可应用于在网络中建立树形拓扑，消除网络中的环路，并且可以通过一定的方法实现路径冗余，但不是一定可以实现路径冗余。生成树协议适合所有厂商的网络设备，在配置上和体现功能强度上有所差别，但是在原理和应用效果是一致的。  TCP  TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内 [1] 另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。  TLSv1.</description>
    </item>
    
    <item>
      <title>TCP/IP学习理解(一)</title>
      <link>https://timx.cn/post/tcp_1/</link>
      <pubDate>Wed, 11 Jul 2018 16:31:53 +0800</pubDate>
      
      <guid>https://timx.cn/post/tcp_1/</guid>
      <description>Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台电脑规定一个地址。
 TCP/IP四层模型    应用层    HTTP      运输层    TCP、UDP     网络层（互联网层）    IP      链路层（数据链路层/网络接口层）    设备驱动程序、计算机中对应的网络接口卡    OSI七层模型    应用层     表示层     会话层     传输层     网络层     数据链路层     物理层    OSI七层模式简单通俗理解  这个模型推出的最开始，是是因为美国人有两台机器之间进行通信的需求。</description>
    </item>
    
    <item>
      <title>hugo的模板Maupassant</title>
      <link>https://timx.cn/post/maupassant/</link>
      <pubDate>Wed, 11 Jul 2018 11:05:03 +0800</pubDate>
      
      <guid>https://timx.cn/post/maupassant/</guid>
      <description> maupassant-hugo Maupassant theme, ported to Hugo. 这个模板基于 https://github.com/JokerQyou/maupassant-hugo
用模板做的个人blog https://timx.cn/
模板下载地址 https://github.com/timzzx/maupassant-hugo
1.添加了右侧卡片式的个人介绍 2.添加了右侧日历显示 3.添加了gittalk评论（之前加了gitment，后来发现gittalk更优秀就替换成gittalk） 4.原模板中手机端显示右侧栏会被隐藏，修改后在手机端让右侧栏显示在文章的下方。 5.添加了背景动画 6.修改了hugo的TableOfContents的样式 由于hugo的文章目录是根据标题的#自动设置ul li的层次。所以如果标题用的#号过多显示会比较难看。
6.修改了表格展示的样式 6.增加了fontawesome icons 注意事项 1.要增加菜单在md文件中加入type: standalone
2.文章要有评论在md文件中加入gitment: true
3.文章要有目录在md文件中加入TableOfContents: true
--- title: &amp;quot;博客开通&amp;quot; date: 2018-07-04T17:44:01+08:00 categories: [其他] tags: [其他] gitment: true TableOfContents: true ---  4.配置gitment在config.toml加入以下配置
[params] clientID=&#39;&#39; clientSecret=&#39;&#39; owner=&#39;&#39; repo=&#39;&#39; admin=&#39;&#39;  </description>
    </item>
    
    <item>
      <title>markdown基本写法</title>
      <link>https://timx.cn/post/markdown/</link>
      <pubDate>Mon, 09 Jul 2018 18:17:05 +0800</pubDate>
      
      <guid>https://timx.cn/post/markdown/</guid>
      <description>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。
 标题 标题 H1 标题 H2 标题 H3 标题 H4 标题 H5 标题 H6 # 标题 H1 ## 标题 H2 ### 标题 H3 #### 标题 H4 ##### 标题 H5 ###### 标题 H6  下划线 ----  表格    水果 价格 数量     香蕉 $1 5   苹果 $1 6   草莓 $1 7    | 水果 | 价格 | 数量 | | ------- | -----: | :----: | | 香蕉 | $1 | 5 | | 苹果 | $1 | 6 | | 草莓 | $1 | 7 |  文本强调 斜体 or 强调</description>
    </item>
    
    <item>
      <title>留言板</title>
      <link>https://timx.cn/wall/</link>
      <pubDate>Fri, 06 Jul 2018 11:24:40 +0800</pubDate>
      
      <guid>https://timx.cn/wall/</guid>
      <description>欢迎大家留言。</description>
    </item>
    
    <item>
      <title>博客开通</title>
      <link>https://timx.cn/post/new/</link>
      <pubDate>Wed, 04 Jul 2018 17:44:01 +0800</pubDate>
      
      <guid>https://timx.cn/post/new/</guid>
      <description>  第一次用github的Pages来做自己的博客感觉挺有意思，希望自己能坚持写下去吧！
 测试代码展示 package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;Hello World&amp;quot;) }  </description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://timx.cn/about/</link>
      <pubDate>Tue, 03 Jul 2018 17:41:40 +0800</pubDate>
      
      <guid>https://timx.cn/about/</guid>
      <description>这是我的第N个博客了！！</description>
    </item>
    
  </channel>
</rss>